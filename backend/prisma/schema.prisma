// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  role        String   @default("user")
  department  String?
  avatar      String?
  phone       String?
  location    String?
  isAgent     Boolean  @default(false)
  skills      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  submittedTickets Ticket[] @relation("SubmittedBy")
  assignedTickets  Ticket[] @relation("AssignedTo")
  comments        Comment[]
  attachments     Attachment[]
  knowledgeBase   KnowledgeBase[]

  @@map("users")
}

model Ticket {
  id            String    @id @default(cuid())
  title         String
  description   String
  category      String
  priority      Priority  @default(MEDIUM)
  status        Status    @default(OPEN)
  submittedBy   String
  submittedAt   DateTime  @default(now())
  assignedTo    String?
  assignedAt    DateTime?
  dueDate       DateTime?
  resolvedAt    DateTime?
  resolution    String?
  satisfaction  Int?      @db.SmallInt
  tags          Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  submitter     User      @relation("SubmittedBy", fields: [submittedBy], references: [id])
  assignee      User?     @relation("AssignedTo", fields: [assignedTo], references: [id])
  comments      Comment[]
  attachments   Attachment[]
  tasks         TicketTask[]
  events        TicketEvent[]

  @@map("tickets")
}

model Comment {
  id          String   @id @default(cuid())
  ticketId    String
  authorId    String
  content     String
  isInternal  Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  ticket      Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author      User         @relation(fields: [authorId], references: [id])
  attachments Attachment[]

  @@map("comments")
}

model Attachment {
  id         String   @id @default(cuid())
  ticketId   String?
  commentId  String?
  name       String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedBy String
  uploadedAt DateTime @default(now())

  // Relations
  ticket     Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  uploader   User     @relation(fields: [uploadedBy], references: [id])

  @@map("attachments")
}

model TicketTask {
  id             String    @id @default(cuid())
  ticketId       String
  title          String
  description    String
  status         TaskStatus @default(PENDING)
  priority       Priority  @default(MEDIUM)
  progress       Int       @default(0) @db.SmallInt
  assignedTo     String?
  dueDate        DateTime?
  startDate      DateTime  @default(now())
  completedDate  DateTime?
  estimatedHours Float?
  actualHours    Float?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  ticket         Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_tasks")
}

model TicketEvent {
  id          String    @id @default(cuid())
  ticketId    String
  title       String
  date        DateTime  @default(now())
  type        EventType
  priority    Priority  @default(MEDIUM)
  description String?
  assignedTo  String?
  createdAt   DateTime  @default(now())

  // Relations
  ticket      Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_events")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String
  tags        Json?
  views       Int      @default(0)
  helpful     Int      @default(0)
  authorId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User?    @relation(fields: [authorId], references: [id])

  @@map("knowledge_base")
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum EventType {
  TICKET_DUE
  SLA_DEADLINE
  AGENT_ASSIGNMENT
  FOLLOW_UP
  ESCALATION
}
