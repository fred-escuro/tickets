generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                    @id @default(cuid())
  firstName                   String
  lastName                    String
  middleName                  String?
  email                       String                    @unique
  password                    String
  avatar                      String?
  phone                       String?
  location                    String?
  isAgent                     Boolean                   @default(false)
  skills                      Json?
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  passwordResetToken          String?
  passwordResetExpires        DateTime?
  oauthProvider               String?
  oauthProviderId             String?
  emailVerifiedAt             DateTime?
  lastLoginAt                 DateTime?
  emailVerificationToken      String?
  emailVerificationExpires    DateTime?
  assignmentPriority          Int                       @default(1)
  isAvailable                 Boolean                   @default(true)
  lastAssignmentAt            DateTime?
  maxConcurrentTickets        Int                       @default(10)
  attachments                 Attachment[]
  createdTemplates            AutoResponseTemplate[]    @relation("TemplateCreator")
  comments                    Comment[]
  managesDepartments          Department[]              @relation("DepartmentManager")
  emailLogs                   EmailLog[]
  knowledgeBase               KnowledgeBase[]
  taskAssignmentHistoryBy     TaskAssignmentHistory[]   @relation("TaskAssignmentBy")
  taskAssignmentHistoryFrom   TaskAssignmentHistory[]   @relation("TaskAssignmentFrom")
  taskAssignmentHistoryTo     TaskAssignmentHistory[]   @relation("TaskAssignmentTo")
  taskComments                TaskComment[]
  taskStatusHistory           TaskStatusHistory[]
  ticketAssignmentHistoryBy   TicketAssignmentHistory[] @relation("AssignmentAssignedBy")
  ticketAssignmentHistoryFrom TicketAssignmentHistory[] @relation("AssignmentFromUser")
  ticketAssignmentHistoryTo   TicketAssignmentHistory[] @relation("AssignmentToUser")
  statusHistory               TicketStatusHistory[]
  assignedTickets             Ticket[]                  @relation("AssignedTo")
  escalatedTickets            Ticket[]                  @relation("EscalatedBy")
  submittedTickets            Ticket[]                  @relation("SubmittedBy")
  departments                 UserDepartment[]
  roles                       UserRole[]

  @@map("users")
}

model Ticket {
  id                     String                    @id @default(cuid())
  title                  String
  description            String
  submittedBy            String
  submittedAt            DateTime                  @default(now())
  assignedTo             String?
  assignedAt             DateTime?
  dueDate                DateTime?
  resolvedAt             DateTime?
  resolution             String?
  satisfaction           Int?                      @db.SmallInt
  tags                   Json?
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  ticketNumber           Int                       @unique @default(autoincrement())
  categoryId             String
  customFields           Json?
  escalatedAt            DateTime?
  escalatedBy            String?
  priorityId             String
  slaResolveAt           DateTime?
  slaResponseAt          DateTime?
  statusId               String
  assignedToDepartmentId String?
  source                 TicketSource              @default(WEB)
  attachments            Attachment[]
  autoResponses          AutoResponse[]
  comments               Comment[]
  emailFollowups         EmailFollowup[]
  emailLogs              EmailLog[]
  assignmentHistory      TicketAssignmentHistory[]
  events                 TicketEvent[]
  statusHistory          TicketStatusHistory[]
  tasks                  TicketTask[]
  assignedToDepartment   Department?               @relation("AssignedToDepartment", fields: [assignedToDepartmentId], references: [id])
  assignee               User?                     @relation("AssignedTo", fields: [assignedTo], references: [id])
  category               TicketCategory            @relation(fields: [categoryId], references: [id])
  escalator              User?                     @relation("EscalatedBy", fields: [escalatedBy], references: [id])
  priority               TicketPriority            @relation(fields: [priorityId], references: [id])
  status                 TicketStatus              @relation(fields: [statusId], references: [id])
  submitter              User                      @relation("SubmittedBy", fields: [submittedBy], references: [id])

  @@map("tickets")
}

/// Comprehensive email tracking for both inbound and outbound emails
model EmailLog {
  id             String           @id @default(cuid())
  messageId      String?          @unique
  direction      EmailDirection
  type           EmailMessageType @default(NEW)
  from           String
  to             String
  cc             String?
  bcc            String?
  subject        String?
  body           String?
  htmlBody       String?
  ticketId       String?
  userId         String?
  status         EmailStatus      @default(SENT)
  sentAt         DateTime?
  receivedAt     DateTime?
  processedAt    DateTime         @default(now())
  error          String?
  retryCount     Int              @default(0)
  rawMeta        Json?
  attachments    Json?
  deliveryStatus Json?
  readAt         DateTime?
  replyTo        String?
  inReplyTo      String?
  references     String?
  imapUid        Int?
  imap_raw       String?
  threadId       String?
  ticket         Ticket?          @relation(fields: [ticketId], references: [id])
  user           User?            @relation(fields: [userId], references: [id])

  @@index([direction])
  @@index([status])
  @@index([sentAt])
  @@index([receivedAt])
  @@index([ticketId])
  @@index([userId])
  @@index([imapUid])
  @@index([threadId])
  @@index([inReplyTo])
  @@index([references])
  @@map("email_logs")
}

model AutoResponseTemplate {
  id                String         @id @default(cuid())
  name              String
  description       String?
  subjectTemplate   String
  bodyTemplate      String
  triggerConditions Json?
  departmentId      String?
  isActive          Boolean        @default(true)
  createdBy         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  creator           User?          @relation("TemplateCreator", fields: [createdBy], references: [id])
  department        Department?    @relation(fields: [departmentId], references: [id])
  responses         AutoResponse[]

  @@index([departmentId])
  @@index([isActive])
  @@map("auto_response_templates")
}

model AutoResponse {
  id         String               @id @default(cuid())
  ticketId   String
  templateId String
  responseId String               @unique
  toEmail    String
  subject    String
  body       String
  threadId   String?
  sentAt     DateTime             @default(now())
  status     AutoResponseStatus   @default(SENT)
  template   AutoResponseTemplate @relation(fields: [templateId], references: [id])
  ticket     Ticket               @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  followups  EmailFollowup[]

  @@index([ticketId])
  @@index([responseId])
  @@index([threadId])
  @@index([sentAt])
  @@map("auto_responses")
}

model EmailFollowup {
  id              String         @id @default(cuid())
  autoResponseId  String
  ticketId        String
  originalEmailId String?
  followupEmailId String?
  content         String
  processedAt     DateTime       @default(now())
  status          FollowupStatus @default(PROCESSED)
  autoResponse    AutoResponse   @relation(fields: [autoResponseId], references: [id], onDelete: Cascade)
  ticket          Ticket         @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([autoResponseId])
  @@index([ticketId])
  @@index([processedAt])
  @@map("email_followups")
}

model Comment {
  id          String       @id @default(cuid())
  ticketId    String
  authorId    String
  content     String
  isInternal  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  attachments Attachment[]
  author      User         @relation(fields: [authorId], references: [id])
  ticket      Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id         String   @id @default(cuid())
  ticketId   String?
  commentId  String?
  name       String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedBy String
  uploadedAt DateTime @default(now())
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  ticket     Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  uploader   User     @relation(fields: [uploadedBy], references: [id])

  @@map("attachments")
}

model TicketTask {
  id                String                  @id @default(cuid())
  ticketId          String
  title             String
  description       String
  progress          Int                     @default(0) @db.SmallInt
  assignedTo        String?
  dueDate           DateTime?
  startDate         DateTime                @default(now())
  completedDate     DateTime?
  estimatedHours    Float?
  actualHours       Float?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  taskPriorityId    String
  taskStatusId      String
  assignmentHistory TaskAssignmentHistory[]
  comments          TaskComment[]
  statusHistory     TaskStatusHistory[]
  priority          TaskPriorityDef         @relation(fields: [taskPriorityId], references: [id])
  status            TaskStatusDef           @relation(fields: [taskStatusId], references: [id])
  ticket            Ticket                  @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_tasks")
}

model TaskComment {
  id         String     @id @default(cuid())
  taskId     String
  authorId   String
  content    String
  isInternal Boolean    @default(false)
  createdAt  DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id])
  task       TicketTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model TaskStatusHistory {
  id         String     @id @default(cuid())
  taskId     String
  fromStatus TaskStatus
  toStatus   TaskStatus
  changedBy  String
  changedAt  DateTime   @default(now())
  reason     String?
  user       User       @relation(fields: [changedBy], references: [id])
  task       TicketTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_status_history")
}

model TaskAssignmentHistory {
  id           String     @id @default(cuid())
  taskId       String
  fromUserId   String?
  toUserId     String?
  assignedById String
  assignedAt   DateTime   @default(now())
  reason       String?
  assignedBy   User       @relation("TaskAssignmentBy", fields: [assignedById], references: [id])
  fromUser     User?      @relation("TaskAssignmentFrom", fields: [fromUserId], references: [id])
  task         TicketTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  toUser       User?      @relation("TaskAssignmentTo", fields: [toUserId], references: [id])

  @@map("task_assignment_history")
}

model TaskStatusDef {
  id        String       @id @default(cuid())
  key       String       @unique
  name      String
  color     String?      @default("gray")
  sortOrder Int          @default(0)
  tasks     TicketTask[]

  @@map("task_statuses")
}

model TaskPriorityDef {
  id        String       @id @default(cuid())
  key       String       @unique
  name      String
  color     String?      @default("gray")
  level     Int          @default(0)
  sortOrder Int          @default(0)
  tasks     TicketTask[]

  @@map("task_priorities")
}

model TicketEvent {
  id          String    @id @default(cuid())
  ticketId    String
  title       String
  date        DateTime  @default(now())
  type        EventType
  priority    Priority  @default(MEDIUM)
  description String?
  assignedTo  String?
  createdAt   DateTime  @default(now())
  ticket      Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_events")
}

model KnowledgeBase {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  tags      Json?
  views     Int      @default(0)
  helpful   Int      @default(0)
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])

  @@map("knowledge_base")
}

model Department {
  id                          String                    @id @default(cuid())
  name                        String                    @unique
  description                 String?
  managerId                   String?
  parentId                    String?
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  assignmentStrategy          String                    @default("round_robin")
  autoAssignEnabled           Boolean                   @default(true)
  maxTicketsPerAgent          Int                       @default(10)
  autoResponseTemplates       AutoResponseTemplate[]
  manager                     User?                     @relation("DepartmentManager", fields: [managerId], references: [id])
  parent                      Department?               @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children                    Department[]              @relation("DepartmentHierarchy")
  ticketAssignmentHistoryFrom TicketAssignmentHistory[] @relation("AssignmentFromDepartment")
  ticketAssignmentHistoryTo   TicketAssignmentHistory[] @relation("AssignmentToDepartment")
  assignedTickets             Ticket[]                  @relation("AssignedToDepartment")
  users                       UserDepartment[]

  @@map("departments")
}

/// Junction table for many-to-many relationship between Users and Departments
model UserDepartment {
  id           String     @id @default(cuid())
  userId       String
  departmentId String
  isPrimary    Boolean    @default(false)
  joinedAt     DateTime   @default(now())
  leftAt       DateTime?
  role         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@index([userId])
  @@index([departmentId])
  @@index([isPrimary])
  @@map("user_departments")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  isSystem    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id          String               @id @default(cuid())
  key         String               @unique
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  menuItems   MenuItemPermission[]
  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id        String  @id @default(cuid())
  userId    String
  roleId    String
  isPrimary Boolean @default(false)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model MenuItem {
  id          String               @id @default(cuid())
  parentId    String?
  label       String
  path        String?
  icon        String?
  sortOrder   Int                  @default(0)
  isActive    Boolean              @default(true)
  featureFlag String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  permissions MenuItemPermission[]
  parent      MenuItem?            @relation("MenuHierarchy", fields: [parentId], references: [id])
  children    MenuItem[]           @relation("MenuHierarchy")

  @@map("menu_items")
}

model MenuItemPermission {
  menuItemId   String
  permissionId String
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([menuItemId, permissionId])
  @@map("menu_item_permissions")
}

model AccessPolicy {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  effect      AccessEffect      @default(ALLOW)
  subjectType PolicySubjectType
  subjectId   String?
  resource    String
  action      String
  conditions  Json?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([subjectType, subjectId])
  @@map("access_policies")
}

model TicketCategory {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  color           String           @default("blue")
  icon            String?
  parentId        String?
  isActive        Boolean          @default(true)
  sortOrder       Int              @default(0)
  customFields    Json?
  autoAssignRules Json?
  slaRules        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parent          TicketCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        TicketCategory[] @relation("CategoryHierarchy")
  templates       TicketTemplate[]
  workflows       TicketWorkflow[]
  tickets         Ticket[]

  @@map("ticket_categories")
}

model TicketPriority {
  id               String           @id @default(cuid())
  name             String           @unique
  description      String?
  color            String           @default("blue")
  icon             String?
  level            Int              @unique
  isActive         Boolean          @default(true)
  sortOrder        Int              @default(0)
  slaResponseHours Int              @default(24)
  slaResolveHours  Int              @default(72)
  escalationRules  Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  workflows        TicketWorkflow[]
  tickets          Ticket[]

  @@map("ticket_priorities")
}

model TicketStatus {
  id                    String                @id @default(cuid())
  name                  String                @unique
  description           String?
  color                 String                @default("blue")
  icon                  String?
  isActive              Boolean               @default(true)
  isClosed              Boolean               @default(false)
  isResolved            Boolean               @default(false)
  sortOrder             Int                   @default(0)
  allowedTransitions    Json?
  permissions           Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  previousStatusHistory TicketStatusHistory[] @relation("PreviousStatus")
  statusHistory         TicketStatusHistory[] @relation("CurrentStatus")
  tickets               Ticket[]

  @@map("ticket_statuses")
}

model TicketStatusHistory {
  id               String        @id @default(cuid())
  ticketId         String
  statusId         String
  previousStatusId String?
  changedBy        String
  changedAt        DateTime      @default(now())
  reason           String?
  comment          String?
  user             User          @relation(fields: [changedBy], references: [id])
  previousStatus   TicketStatus? @relation("PreviousStatus", fields: [previousStatusId], references: [id])
  status           TicketStatus  @relation("CurrentStatus", fields: [statusId], references: [id])
  ticket           Ticket        @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_status_history")
}

model TicketAssignmentHistory {
  id               String      @id @default(cuid())
  ticketId         String
  fromUserId       String?
  toUserId         String?
  fromDepartmentId String?
  toDepartmentId   String?
  assignedById     String
  reason           String?
  assignedAt       DateTime    @default(now())
  assignedBy       User        @relation("AssignmentAssignedBy", fields: [assignedById], references: [id])
  fromDepartment   Department? @relation("AssignmentFromDepartment", fields: [fromDepartmentId], references: [id])
  fromUser         User?       @relation("AssignmentFromUser", fields: [fromUserId], references: [id])
  ticket           Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  toDepartment     Department? @relation("AssignmentToDepartment", fields: [toDepartmentId], references: [id])
  toUser           User?       @relation("AssignmentToUser", fields: [toUserId], references: [id])

  @@map("ticket_assignment_history")
}

model TicketTemplate {
  id                  String         @id @default(cuid())
  name                String         @unique
  description         String?
  categoryId          String
  title               String
  templateDescription String
  customFields        Json?
  isActive            Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  category            TicketCategory @relation(fields: [categoryId], references: [id])

  @@map("ticket_templates")
}

model TicketWorkflow {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  categoryId  String?
  priorityId  String?
  rules       Json
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category    TicketCategory? @relation(fields: [categoryId], references: [id])
  priority    TicketPriority? @relation(fields: [priorityId], references: [id])

  @@map("ticket_workflows")
}

model AppSetting {
  id          String      @id @default(cuid())
  namespace   String
  key         String
  value       Json
  isSecret    Boolean     @default(false)
  description String?
  updatedBy   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  type        SettingType @default(JSON)

  @@unique([namespace, key])
  @@index([namespace])
  @@map("app_settings")
}

model SettingHistory {
  id        String   @id @default(cuid())
  namespace String
  key       String
  oldValue  Json?
  newValue  Json?
  changedBy String?
  reason    String?
  changedAt DateTime @default(now())

  @@index([namespace, key])
  @@map("setting_history")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum EventType {
  TICKET_DUE
  SLA_DEADLINE
  AGENT_ASSIGNMENT
  FOLLOW_UP
  ESCALATION
}

enum AccessEffect {
  ALLOW
  DENY
}

enum PolicySubjectType {
  ROLE
  USER
  DEPARTMENT
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  FILE
}

enum TicketSource {
  WEB
  EMAIL
  API
  MOBILE
  OTHER
}

enum EmailMessageType {
  NEW
  REPLY
  FOLLOWUP
}

enum EmailDirection {
  INBOUND
  OUTBOUND
}

enum EmailStatus {
  SENT
  DELIVERED
  FAILED
  BOUNCED
  PROCESSING
  PROCESSED
  ERROR
}

enum AutoResponseStatus {
  SENT
  DELIVERED
  FAILED
  BOUNCED
  PROCESSING
  ERROR
}

enum FollowupStatus {
  PROCESSED
  FAILED
  PENDING
  IGNORED
}
