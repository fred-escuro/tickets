// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  middleName  String?
  email       String   @unique
  password    String
  // Legacy string department removed; use relation below
  departmentId String?
  avatar      String?
  phone       String?
  location    String?
  isAgent     Boolean  @default(false)
  skills      Json?
  // Auth & recovery fields
  passwordResetToken   String?
  passwordResetExpires DateTime?
  oauthProvider        String?
  oauthProviderId      String?
  emailVerifiedAt      DateTime?
  lastLoginAt          DateTime?
  // Email verification fields
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  submittedTickets Ticket[] @relation("SubmittedBy")
  assignedTickets  Ticket[] @relation("AssignedTo")
  escalatedTickets Ticket[] @relation("EscalatedBy")
  comments        Comment[]
  attachments     Attachment[]
  knowledgeBase   KnowledgeBase[]
  statusHistory   TicketStatusHistory[]
  taskComments    TaskComment[]
  taskStatusHistory TaskStatusHistory[]
  taskAssignmentHistoryFrom TaskAssignmentHistory[] @relation("TaskAssignmentFrom")
  taskAssignmentHistoryTo TaskAssignmentHistory[] @relation("TaskAssignmentTo")
  taskAssignmentHistoryBy TaskAssignmentHistory[] @relation("TaskAssignmentBy")

  // Department relation
  departmentEntity Department? @relation("UserDepartment", fields: [departmentId], references: [id])

  // RBAC relations
  roles UserRole[]

  // Departments managed by the user
  managesDepartments Department[] @relation("DepartmentManager")

  @@map("users")
}

model Ticket {
  id            String    @id @default(cuid())
  ticketNumber  Int       @unique @default(autoincrement())
  title         String
  description   String
  categoryId    String
  priorityId    String
  statusId      String
  submittedBy   String
  submittedAt   DateTime  @default(now())
  assignedTo    String?
  assignedAt    DateTime?
  dueDate       DateTime?
  resolvedAt    DateTime?
  resolution    String?
  satisfaction  Int?      @db.SmallInt
  tags          Json?
  customFields  Json?     // For dynamic fields per category
  slaResponseAt DateTime? // When SLA response time is due
  slaResolveAt  DateTime? // When SLA resolution time is due
  escalatedAt   DateTime? // When ticket was escalated
  escalatedBy   String?   // Who escalated the ticket
  source        TicketSource @default(WEB)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  submitter     User      @relation("SubmittedBy", fields: [submittedBy], references: [id])
  assignee      User?     @relation("AssignedTo", fields: [assignedTo], references: [id])
  escalator     User?     @relation("EscalatedBy", fields: [escalatedBy], references: [id])
  category      TicketCategory @relation(fields: [categoryId], references: [id])
  priority      TicketPriority @relation(fields: [priorityId], references: [id])
  status        TicketStatus @relation(fields: [statusId], references: [id])
  comments      Comment[]
  attachments   Attachment[]
  tasks         TicketTask[]
  events        TicketEvent[]
  statusHistory TicketStatusHistory[]
  emailMessages EmailMessage[]

  @@map("tickets")
}

/// Stores metadata about ingested email messages to ensure idempotency and traceability
model EmailMessage {
  id          String   @id @default(cuid())
  messageId   String   @unique
  ticketId    String?
  type        EmailMessageType @default(NEW)
  from        String
  to          String
  subject     String?
  processedAt DateTime @default(now())
  error       String?
  rawMeta     Json?

  // Relations
  ticket      Ticket?  @relation(fields: [ticketId], references: [id], onDelete: SetNull)

  @@map("email_messages")
}

model Comment {
  id          String   @id @default(cuid())
  ticketId    String
  authorId    String
  content     String
  isInternal  Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  ticket      Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author      User         @relation(fields: [authorId], references: [id])
  attachments Attachment[]

  @@map("comments")
}

model Attachment {
  id         String   @id @default(cuid())
  ticketId   String?
  commentId  String?
  name       String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedBy String
  uploadedAt DateTime @default(now())

  // Relations
  ticket     Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  uploader   User     @relation(fields: [uploadedBy], references: [id])

  @@map("attachments")
}

model TicketTask {
  id             String    @id @default(cuid())
  ticketId       String
  title          String
  description    String
  taskStatusId   String
  taskPriorityId String
  progress       Int       @default(0) @db.SmallInt
  assignedTo     String?
  dueDate        DateTime?
  startDate      DateTime  @default(now())
  completedDate  DateTime?
  estimatedHours Float?
  actualHours    Float?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  ticket         Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  status         TaskStatusDef   @relation(fields: [taskStatusId], references: [id])
  priority       TaskPriorityDef @relation(fields: [taskPriorityId], references: [id])
  comments       TaskComment[]
  statusHistory  TaskStatusHistory[]
  assignmentHistory TaskAssignmentHistory[]

  @@map("ticket_tasks")
}

model TaskComment {
  id         String   @id @default(cuid())
  taskId     String
  authorId   String
  content    String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  task   TicketTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User       @relation(fields: [authorId], references: [id])

  @@map("task_comments")
}

model TaskStatusHistory {
  id         String    @id @default(cuid())
  taskId     String
  fromStatus TaskStatus
  toStatus   TaskStatus
  changedBy  String
  changedAt  DateTime  @default(now())
  reason     String?

  // Relations
  task TicketTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User       @relation(fields: [changedBy], references: [id])

  @@map("task_status_history")
}

model TaskAssignmentHistory {
  id         String    @id @default(cuid())
  taskId     String
  fromUserId String?
  toUserId   String?
  assignedById String
  assignedAt DateTime @default(now())
  reason     String?

  // Relations
  task      TicketTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fromUser  User?      @relation("TaskAssignmentFrom", fields: [fromUserId], references: [id])
  toUser    User?      @relation("TaskAssignmentTo", fields: [toUserId], references: [id])
  assignedBy User      @relation("TaskAssignmentBy", fields: [assignedById], references: [id])

  @@map("task_assignment_history")
}

model TaskStatusDef {
  id        String  @id @default(cuid())
  key       String  @unique
  name      String
  color     String? @default("gray")
  sortOrder Int     @default(0)

  tasks     TicketTask[]

  @@map("task_statuses")
}

model TaskPriorityDef {
  id        String  @id @default(cuid())
  key       String  @unique
  name      String
  color     String? @default("gray")
  level     Int     @default(0)
  sortOrder Int     @default(0)

  tasks     TicketTask[]

  @@map("task_priorities")
}

model TicketEvent {
  id          String    @id @default(cuid())
  ticketId    String
  title       String
  date        DateTime  @default(now())
  type        EventType
  priority    Priority  @default(MEDIUM)
  description String?
  assignedTo  String?
  createdAt   DateTime  @default(now())

  // Relations
  ticket      Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_events")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String
  tags        Json?
  views       Int      @default(0)
  helpful     Int      @default(0)
  authorId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User?    @relation(fields: [authorId], references: [id])

  @@map("knowledge_base")
}

// Organization & Access Control Models

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  managerId   String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  manager   User?       @relation("DepartmentManager", fields: [managerId], references: [id])
  parent    Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentHierarchy")
  users     User[]      @relation("UserDepartment")

  @@map("departments")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  key         String   @unique // e.g. "tickets:read"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles RolePermission[]
  menuItems MenuItemPermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  isPrimary Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Menu & Navigation Models
model MenuItem {
  id          String    @id @default(cuid())
  parentId    String?
  label       String
  path        String?
  icon        String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  featureFlag String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent    MenuItem?     @relation("MenuHierarchy", fields: [parentId], references: [id])
  children  MenuItem[]    @relation("MenuHierarchy")
  permissions MenuItemPermission[]

  @@map("menu_items")
}

model MenuItemPermission {
  menuItemId   String
  permissionId String

  // Relations
  menuItem   MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([menuItemId, permissionId])
  @@map("menu_item_permissions")
}

model AccessPolicy {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  effect      AccessEffect      @default(ALLOW)
  subjectType PolicySubjectType
  subjectId   String?           // roleId, userId, or departmentId depending on subjectType
  resource    String            // e.g. "tickets", "comments", "users"
  action      String            // e.g. "read", "write", "delete"
  conditions  Json?             // JSON-based ABAC conditions
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([subjectType, subjectId])
  @@map("access_policies")
}

// Enhanced Ticket Management Models
model TicketCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("blue")
  icon        String?  // Icon identifier for UI
  parentId    String?  // For hierarchical categories
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  customFields Json?   // Dynamic form fields for this category
  autoAssignRules Json? // Rules for auto-assignment
  slaRules    Json?    // Category-specific SLA rules
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      TicketCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    TicketCategory[] @relation("CategoryHierarchy")
  tickets     Ticket[]
  templates   TicketTemplate[]
  workflows   TicketWorkflow[]

  @@map("ticket_categories")
}

model TicketPriority {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("blue")
  icon        String?  // Icon identifier for UI
  level       Int      @unique // 1-10 scale for sorting
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  slaResponseHours Int @default(24) // Response time in hours
  slaResolveHours  Int @default(72) // Resolution time in hours
  escalationRules  Json? // Auto-escalation rules
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tickets     Ticket[]
  workflows   TicketWorkflow[]

  @@map("ticket_priorities")
}

model TicketStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("blue")
  icon        String?  // Icon identifier for UI
  isActive    Boolean  @default(true)
  isClosed    Boolean  @default(false) // Whether this status closes the ticket
  isResolved  Boolean  @default(false) // Whether this status resolves the ticket
  sortOrder   Int      @default(0)
  allowedTransitions Json? // Which statuses can transition to this one
  permissions Json?    // Who can set this status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tickets     Ticket[]
  statusHistory TicketStatusHistory[] @relation("CurrentStatus")
  previousStatusHistory TicketStatusHistory[] @relation("PreviousStatus")

  @@map("ticket_statuses")
}

model TicketStatusHistory {
  id          String   @id @default(cuid())
  ticketId    String
  statusId    String
  previousStatusId String?
  changedBy   String
  changedAt   DateTime @default(now())
  reason      String?  // Optional reason for status change
  comment     String?  // Optional comment about the change

  // Relations
  ticket      Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  status      TicketStatus @relation("CurrentStatus", fields: [statusId], references: [id])
  previousStatus TicketStatus? @relation("PreviousStatus", fields: [previousStatusId], references: [id])
  user        User @relation(fields: [changedBy], references: [id])

  @@map("ticket_status_history")
}

model TicketTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  categoryId  String
  title       String
  templateDescription String
  customFields Json?   // Pre-filled custom fields
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    TicketCategory @relation(fields: [categoryId], references: [id])

  @@map("ticket_templates")
}

model TicketWorkflow {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  categoryId  String?  // Optional: workflow for specific category
  priorityId  String?  // Optional: workflow for specific priority
  rules       Json     // Workflow automation rules
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    TicketCategory? @relation(fields: [categoryId], references: [id])
  priority    TicketPriority? @relation(fields: [priorityId], references: [id])

  @@map("ticket_workflows")
}

// SystemSettings model removed after migration to generic settings

// Generic App Settings (namespace/key/value)
model AppSetting {
  id         String   @id @default(cuid())
  namespace  String
  key        String
  value      Json
  type       SettingType @default(JSON)
  isSecret   Boolean  @default(false)
  description String?
  updatedBy  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([namespace, key])
  @@index([namespace])
  @@map("app_settings")
}

model SettingHistory {
  id         String   @id @default(cuid())
  namespace  String
  key        String
  oldValue   Json?
  newValue   Json?
  changedBy  String?
  reason     String?
  changedAt  DateTime @default(now())

  @@index([namespace, key])
  @@map("setting_history")
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum EventType {
  TICKET_DUE
  SLA_DEADLINE
  AGENT_ASSIGNMENT
  FOLLOW_UP
  ESCALATION
}

enum AccessEffect {
  ALLOW
  DENY
}

enum PolicySubjectType {
  ROLE
  USER
  DEPARTMENT
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  FILE
}

enum TicketSource {
  WEB
  EMAIL
  API
  MOBILE
  OTHER
}

enum EmailMessageType {
  NEW
  REPLY
}
